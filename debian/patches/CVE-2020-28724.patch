From 86bcd431f9ef5de53a2cc338795723ece24ff39f Mon Sep 17 00:00:00 2001
From: Markus Unterwaditzer <markus@unterwaditzer.net>
Date: Sun, 10 Apr 2016 23:48:45 +0200
Subject: [PATCH 1/4] Restore testcase for absolute requests

---
 tests/test_serving.py | 23 +++++++++++++++++++++++
 1 file changed, 23 insertions(+)

Index: python-werkzeug-0.10.4+dfsg1/tests/test_serving.py
===================================================================
--- python-werkzeug-0.10.4+dfsg1.orig/tests/test_serving.py
+++ python-werkzeug-0.10.4+dfsg1/tests/test_serving.py
@@ -24,6 +24,11 @@ try:
 except ImportError:
     watchdog = None
 
+try:
+    import httplib
+except ImportError:
+    from http import client as httplib
+
 import requests
 import requests.exceptions
 import pytest
@@ -39,6 +44,36 @@ def test_serving(dev_server):
     assert b'Werkzeug/' + version.encode('ascii') in rv
 
 
+def test_absolute_requests(dev_server):
+    server = dev_server('''
+    def app(environ, start_response):
+        assert environ['HTTP_HOST'] == 'surelynotexisting.example.com:1337'
+        assert environ['PATH_INFO'] == '/index.htm'
+        addr = environ['HTTP_X_WERKZEUG_ADDR']
+        assert environ['SERVER_PORT'] == addr.split(':')[1]
+        start_response('200 OK', [('Content-Type', 'text/html')])
+        return [b'YES']
+    ''')
+
+    conn = httplib.HTTPConnection(server.addr)
+    conn.request('GET', 'http://surelynotexisting.example.com:1337/index.htm#ignorethis',
+                 headers={'X-Werkzeug-Addr': server.addr})
+    res = conn.getresponse()
+    assert res.read() == b'YES'
+
+
+def test_double_slash_path(dev_server):
+    server = dev_server('''
+    def app(environ, start_response):
+        assert 'fail' not in environ['HTTP_HOST']
+        start_response('200 OK', [('Content-Type', 'text/plain')])
+        return [b'YES']
+    ''')
+
+    r = requests.get(server.url + '//fail')
+    assert r.content == b'YES'
+
+
 def test_broken_app(dev_server):
     server = dev_server('''
     def app(environ, start_response):
Index: python-werkzeug-0.10.4+dfsg1/werkzeug/serving.py
===================================================================
--- python-werkzeug-0.10.4+dfsg1.orig/werkzeug/serving.py
+++ python-werkzeug-0.10.4+dfsg1/werkzeug/serving.py
@@ -112,7 +112,7 @@ class WSGIRequestHandler(BaseHTTPRequest
             if key not in ('HTTP_CONTENT_TYPE', 'HTTP_CONTENT_LENGTH'):
                 environ[key] = value
 
-        if request_url.netloc:
+        if request_url.scheme and request_url.netloc:
             environ['HTTP_HOST'] = request_url.netloc
 
         return environ
